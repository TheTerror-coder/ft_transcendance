# Documentation Pong 3D Client-Serveur

## 1. Architecture Générale

### Client (Frontend)
- Moteur 3D : Three.js
- Communication : Socket.IO
- Boucle de jeu : requestAnimationFrame
- Interpolation et prédiction de mouvement

### Serveur (Backend)
- Node.js avec Socket.IO
- Physique du jeu
- Gestion des collisions
- Synchronisation des états

## 2. Synchronisation et Networking

### Mises à jour serveur
- Fréquence : 2000ms (2 secondes)
- Validation des mises à jour : seuil de 50ms
- Format des données : position, vélocité, état du jeu

### Interpolation
#### Position des bateaux
- Classe PositionInterpolator
- Facteur de lissage (lerpFactor) : 0.2
- Distinction joueur local/distant
- Mise à jour continue des positions

#### Position de la balle
- Facteur d'interpolation : 0.3
- Gestion des rebonds
- Distance maximale : 10 unités
- Sauvegarde des positions précédentes

## 3. Prédiction de Mouvement

### Prédiction de la balle
- DeltaTime maximum : 50ms
- Facteur d'amortissement : 0.95
- Facteur de prédiction : 0.4
- Calcul basé sur la vélocité

### Formules mathématiques
1. Interpolation linéaire (LERP)
   ```javascript
   newPosition = currentPosition + (targetPosition - currentPosition) * lerpFactor
   ```

2. Prédiction de position
   ```javascript
   predictedPosition = currentPosition + velocity * deltaTime * dampingFactor
   ```

## 4. Gestion des Cas Spéciaux

### Rebonds
- Détection par changement de signe
- Téléportation immédiate
- Réinitialisation de la prédiction

### Grandes distances
- Seuil maximal : 10 unités
- Téléportation directe
- Évite les artefacts visuels

## 5. Optimisations

### Performance
- Limitation du deltaTime
- Validation des mises à jour
- Gestion de la mémoire

### Fluidité visuelle
- Double interpolation (prédiction + correction)
- Amortissement progressif
- Gestion des cas limites

## 6. Système de Jeu

### Modes de jeu
- 1v1 classique
- Mode tournoi
- Mode local

### Rôles des joueurs
- Pilote (contrôle du bateau)
- Canonnier (tir de projectiles)

### Système de points
- Détection des buts
- Mise à jour des scores
- Gestion de la victoire

## 7. Physique du Jeu

### Collisions
- Détection précise avec hitbox
- Calcul des rebonds
- Gestion de la vélocité

### Projectiles
- Trajectoire balistique
- Calcul de dommages
- Interpolation de mouvement

## 8. Interface Utilisateur

### HUD
- Affichage des scores
- Barres de vie
- Messages de jeu

### Caméras
- Vue du pilote
- Vue du canonnier
- Transitions fluides

## 9. Bonnes Pratiques

### Code
- Modularité
- Gestion des erreurs
- Documentation claire

### Networking
- Validation des données
- Gestion de la latence
- Sécurité des communications

## 10. Dépendances Principales

- Three.js : Moteur 3D
- Socket.IO : Communication temps réel
- Node.js : Backend
- Express : Serveur web
