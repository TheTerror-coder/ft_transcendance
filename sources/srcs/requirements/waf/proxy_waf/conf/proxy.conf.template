# Nginx configuration for both HTTP and SSL
# Nginx configuration for reverse-proxying frontend and backend

server_tokens off;

log_format proxylog_format '$realip_remote_addr - $remote_user [$time_local] "$request" '
			'$status $body_bytes_sent "$http_referer" '
			'"$http_user_agent" "$http_x_forwarded_for"';

map $http_upgrade $connection_upgrade {
	default upgrade;
	'' close;
}

upstream frontendmediator {
	server		frontend_waf:3443;
}

upstream backendmediator {
	server		backend:8000;
}

server {
	listen 1880;

	server_name localhost;
	set $always_redirect on;

	access_log /var/log/nginx/proxy.access.log proxylog_format;


	location / {
		client_max_body_size 0; # 0 disables the client request body size checking

		if ($always_redirect = on) {
			return 301 https://$host:1443$request_uri;
		}
	}

	include includes/location_common.conf;

}

server {
	listen 1443 ssl;
	listen [::]:1443 ssl;

	server_name localhost;
	#set $proxy_upstream http://frontendmediator;
	set $frontend_upstream https://frontendmediator; # TODO: uncomment at production
	set $backend_upstream http://backendmediator;
	# set $backend_upstream https://backendmediator; # TODO: uncomment at production

	access_log /var/log/nginx/proxy.access.log proxylog_format;

	ssl_certificate /usr/share/nginx/volumes/nginx/certs/nginx.crt;
	ssl_certificate_key /usr/share/nginx/volumes/nginx/certs/nginx.key;
	ssl_session_timeout 1d;
	ssl_session_cache shared:MozSSL:10m;
	ssl_session_tickets off;

	ssl_dhparam /etc/ssl/certs/dhparam-2048.pem;

	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
	ssl_prefer_server_ciphers off;

	ssl_stapling on;
	ssl_stapling_verify on;

	ssl_verify_client off;
	ssl_verify_depth 1;

	# location ~* .(mp4|webm|jpg|jpeg|gif|png|ico|css|zip|tgz|gz|rar|bz2|pdf|txt|tar|wav|bmp|rtf|js|flv|swf)$
	# {
	# 	add_header	X-InStaticREGex-uri "$uri" always;
	# 	root   /usr/share/nginx/volumes/www/static/;
	# }

	# location ^~ /static/ {
	# 	add_header	X-InStatic-uri "$uri" always;
	# 	root   /usr/share/nginx/volumes/www;
	# 	try_files	$uri $uri/ =404;
	# }
	location = /static/admin/ {
		include includes/backendshared_conf.conf;
	}

	location / {
		include includes/frontendshared_conf.conf;
	}
	location /home/ {
		include includes/frontendshared_conf.conf;
	}
	location /frontpong/ {
		include includes/frontendshared_conf.conf;
	}

	location /admin/ {
		include includes/backendshared_conf.conf;
	}
	location /backend/ {
		include includes/backendshared_conf.conf;
	}
	location /_allauth/ {
		include includes/backendshared_conf.conf;
	}
	location /accounts/ {
		include includes/backendshared_conf.conf;
	}
	location /oauth/ {
		include includes/backendshared_conf.conf;
	}
	location /hello/ {
		include includes/backendshared_conf.conf;
	}
	location /csrf/ {
		include includes/backendshared_conf.conf;
	}
	location /ping/ {
		include includes/backendshared_conf.conf;
	}

	include includes/location_common.conf;
}