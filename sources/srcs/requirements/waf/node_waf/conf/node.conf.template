# Nginx configuration for both HTTP and SSL
# Nginx configuration for reverse-proxying django's node application server

server_tokens off;

log_format nodelog_format '$realip_remote_addr - $remote_user [$time_local] "$request" '
			'$status $body_bytes_sent "$http_referer" '
			'"$http_user_agent" "$http_x_forwarded_for"';

map $http_upgrade $connection_upgrade {
	default upgrade;
	'' close;
}

upstream nodemediator {
	server		node:3000;
}

server {
	listen 4880;

	server_name localhost;
	# set $upstream http://nodemediator;
	set $upstream https://nodemediator; # TODO: uncomment at production if commented
	set $always_redirect on;

	access_log /var/log/nginx/node.access.log nodelog_format;


	location / {
		client_max_body_size 0; # 0 disables the client request body size checking

		if ($always_redirect = on) {
			return 301 https://$host:4443$request_uri;
		}
	}

	include includes/location_common.conf;

}

server {
	listen 4443 ssl;
	listen [::]:4443 ssl;

	server_name localhost;
	set $upstream http://nodemediator;
	# set $upstream https://nodemediator; # TODO: uncomment at production

	access_log /var/log/nginx/node.access.log nodelog_format;

	ssl_certificate /usr/share/nginx/volumes/nginx/certs/nginx.crt;
	ssl_certificate_key /usr/share/nginx/volumes/nginx/certs/nginx.key;
	ssl_session_timeout 1d;
	ssl_session_cache shared:MozSSL:10m;
	ssl_session_tickets off;

	ssl_dhparam /etc/ssl/certs/dhparam-2048.pem;

	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
	ssl_prefer_server_ciphers off;

	ssl_stapling on;
	ssl_stapling_verify on;

	ssl_verify_client off;
	ssl_verify_depth 1;

	location / {
		client_max_body_size 0; # 0 disables the client request body size checking

####################### TODO ##############################
### If below lines are commented:
### Uncomment below lines at production to enable further layer of security 
### between the proxy and Upstream server that should be running with tls enabled, hence update $upstream to 'https'.
### This will make the proxy to verify Upstream server's Certificate Authority
###########################################################
		# proxy_ssl_trusted_certificate	/usr/share/nginx/volumes/nginx/certs/ca/root_ca.crt;
		# proxy_ssl_verify	on;
		# proxy_ssl_verify_depth	2;
		
		include includes/proxy_backend.conf;
	}

	include includes/location_common.conf;
}