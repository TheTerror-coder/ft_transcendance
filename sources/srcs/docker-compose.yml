name: ${PROJECT_NAME}

services:
  setup:
    image: ${SETUP_IMAGE}
    container_name: ${SETUP_CONTAINER}
    build:
      context: ./requirements/setup/
      args:
        - ALPINE_VERSION=${ALPINE_VERSION}
    environment:
      - HEALTHFLAG_FILE=${HEALTHFLAG_FILE}
    volumes:
      - vault_certs:/vault/certs
    # secrets:
    #   - payload_json
    #   - password_policy_json
    networks:
      - transcendance
    healthcheck:
      test: ["CMD-SHELL", "test -f $HEALTHFLAG_FILE || exit 1"]
      interval: 1s
      timeout: 5s
      retries: 10

  vault:
    depends_on:
      setup:
        condition: service_healthy
        restart: true
    image: ${VAULT_IMAGE}
    container_name: ${VAULT_CONTAINER}
    build:
      context: ./requirements/vault/
      args:
        - VAULT_VERSION=${VAULT_VERSION}
        - VAULT_USER_UID=${VAULT_USER_UID}
        - VAULT_USER_GID=${VAULT_USER_GID}
    environment:
      - VAULT_ADDR=${VAULT_ADDR}
      - VAULT_CACERT=${VAULT_CACERT}
      - VAULT_SKIP_VERIFY=true
      - HEALTHFLAG_FILE=${HEALTHFLAG_FILE}
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/file
      - vault_certs:/vault/certs
    # secrets:
    #   - token_id_file
    expose:
      - ${VAULT_API_PORT}
    ports:
      - ${VAULT_API_PORT}:${VAULT_API_PORT}
    networks:
      - transcendance
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert $VAULT_CACERT https://localhost:8200 | grep -q ''",
        ]
      interval: 5s
      timeout: 10s
      retries: 3

  vault_init:
    depends_on:
      vault:
        condition: service_healthy
        restart: true
    image: ${VAULT_INIT_IMAGE}
    container_name: ${VAULT_INIT_CONTAINER}
    build:
      context: ./requirements/vault_init/
      args:
        - VAULT_VERSION=${VAULT_VERSION}
    environment:
      - VAULT_ADDR=${VAULT_INIT_ADDR}
      - VAULT_CACERT=${VAULT_CACERT}
      - NGINX_ALT_NAMES=${NGINX_ALT_NAMES}
      - HEALTHFLAG_FILE=${HEALTHFLAG_FILE}
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/file
      - vault_certs:/vault/certs
      - nginx_certs:/nginx/certs
    secrets:
      - root_access_token
      - secret_access_token
      - password_policy_json
      - secret_access_policy_json
      - nginx_pki_access_policy_json
      - nginx_pki_access_token
    networks:
      - transcendance
    healthcheck:
      test: ["CMD-SHELL", "test -f $HEALTHFLAG_FILE || exit 1"]
      interval: 1s
      timeout: 5s
      retries: 15

  db_postgres:
    depends_on:
      vault_init:
        condition: service_healthy
        restart: true
    image: ${POSTGRES_IMAGE}
    container_name: ${POSTGRES_CONTAINER}
    pull_policy: never
    build: ./requirements/db_postgres/
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      # - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - VAULT_CACERT=${VAULT_CACERT}
      - HEALTHFLAG_FILE=${HEALTHFLAG_FILE}
    volumes:
      - vault_certs:/vault/certs
    secrets:
      - secret_access_token
    healthcheck: #&file_healthcheck
      test: ["CMD-SHELL", "test -f $HEALTHFLAG_FILE || exit 1"]
      interval: 1s
      timeout: 5s
      retries: 10
      # start_period: 20s
    expose:
      - ${POSTGRES_PORT}
    networks:
      - ${NETWORK_NAME}
    # restart: on-failure

  web:
    depends_on:
      db_postgres:
        condition: service_healthy
        restart: true
    image: ${WEB_IMAGE}
    container_name: ${WEB_CONTAINER}
    pull_policy: never
    build:
      context: ./requirements/web/
      args:
        - STATICFILES_DIR=${STATICFILES_DIR}
    environment:
      - WEB_ENTRYPOINT=${WEB_ENTRYPOINT}
      - POSTGRES_USER=${POSTGRES_USER}
      # - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - RESOLVED_PG_HOSTNAME=${RESOLVED_PG_HOSTNAME}
      - GUNICORN_CMD_ARGS=${GUNICORN_CMD_ACTIVE_OPTIONS}
      - STATICFILES_DIR=${STATICFILES_DIR}
      - VAULT_CACERT=${VAULT_CACERT}
      - HEALTHFLAG_FILE=${HEALTHFLAG_FILE}
    volumes:
      - webapps:/usr/src/apps
      - staticfiles:${STATICFILES_DIR}
      - vault_certs:/vault/certs
    secrets:
      - secret_access_token
    healthcheck: #*file_healthcheck
      test:
        [
          "CMD-SHELL",
          "curl -s  http://localhost:${WEB_PORT} | grep -q ''",
        ]
      interval: 1s
      timeout: 5s
      retries: 15
    expose:
      - ${WEB_PORT}
    networks:
      - ${NETWORK_NAME}
    ports:
      - 8888:${WEB_PORT}
    # restart: on-failure

  nginx:
    depends_on:
      web:
        condition: service_healthy
    image: ${NGINX_IMAGE}
    container_name: ${NGINX_CONTAINER}
    pull_policy: never
    build:
      context: ./requirements/nginx/
      args:
        - STATICFILES_DIR=${STATICFILES_DIR}
    volumes:
      - ./requirements/nginx/conf/default.conf:/etc/nginx/conf.d/default.conf
      - ./requirements/nginx/conf/web.conf:/etc/nginx/conf.d/web.conf
      - ./requirements/nginx/conf/vault.conf:/etc/nginx/conf.d/vault.conf
      - staticfiles:${STATICFILES_DIR}
      - nginx_certs:/etc/nginx/ssl/
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s  https://localhost:443 | grep -q ''",
        ]
      interval: 1s
      timeout: 5s
      retries: 15
    ports:
      - ${NGINX_HTTP_PORT}:80
      - ${NGINX_HTTPS_PORT}:${NGINX_HTTPS_PORT}
    networks:
      - ${NETWORK_NAME}
    # restart: on-failure

networks:
  transcendance:
    driver: bridge

volumes:
  vault_data:
    driver: local
  webapps:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${WEBAPPS_VOLUME}
  staticfiles:
    driver: local
  certs:
    driver: local
  vault_certs:
    driver: local
  nginx_certs:
    driver: local

secrets:
  secret_access_token:
    file: ./secrets/secret_access_token
  root_access_token: # TODO remove on production
    file: ./secrets/root_access_token
  password_policy_json:
    file: ./secrets/password_policy_json
  secret_access_policy_json:
    file: ./secrets/secret_access_policy_json
  nginx_pki_access_policy_json:
    file: ./secrets/nginx_pki_access_policy_json
  nginx_pki_access_token:
    file: ./secrets/nginx_pki_access_token