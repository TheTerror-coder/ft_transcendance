name: ${PROJECT_NAME}

services:
  vault_init:
    image: ${VAULT_INIT_IMAGE}
    container_name: ${VAULT_INIT_CONTAINER}
    build:
      context: ./requirements/vault_init/
      args:
        - VAULT_VERSION=${VAULT_VERSION}
        - VAULT_UID=${VAULT_UID}
        - VAULT_GID=${VAULT_GID}
        - SHARED_GID=${SHARED_GID}
        - VAULT_HOME=${VAULT_HOME}
        - VAULT_INIT_DIRS_TO_MAKE=${VAULT_INIT_DIRS_TO_MAKE}
    environment:
      - SECRET_ACCESS_TOKEN=${SECRET_ACCESS_TOKEN}
      - PKI_ACCESS_TOKEN=${PKI_ACCESS_TOKEN}
      - ROOT_ACCESS_TOKEN=${ROOT_ACCESS_TOKEN}
      - VAULT_ADDR=${VAULT_INIT_ADDR}
      - VAULT_CACERT=${VAULT_INIT_CACERT}
      - VAULT_HOME=${VAULT_HOME}
      - VAULT_UID=${VAULT_UID}
      - VAULT_GID=${VAULT_GID}
      - BACKEND_UID=${BACKEND_UID}
      - BACKEND_GID=${BACKEND_GID}
      - SHARED_GID=${SHARED_GID}
      - ALT_NAMES=${ALT_NAMES}
      - MODSEC_ALT_NAMES=${MODSEC_ALT_NAMES}
      - BACKEND_ALT_NAMES=${BACKEND_ALT_NAMES}
      - VAULT_INIT_HEALTHFLAG=${VAULT_INIT_HEALTHFLAG}
      - HEALTHFLAG_FILE=${HEALTHFLAG_FILE}
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:${VAULT_HOME}/volumes/vault/file
      - vault_healthiness:${VAULT_HOME}/volumes/healthiness
      - vault_certs:${VAULT_HOME}/volumes/vault/certs
      - nginx_certs:${VAULT_HOME}/volumes/nginx/certs
      - backend_certs:${VAULT_HOME}/volumes/backend/certs
    networks:
      - transcendance
    healthcheck:
      test: ["CMD-SHELL", "test -f $HEALTHFLAG_FILE || exit 1"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 2
    restart: on-failure

  vault:
    depends_on:
      vault_init:
        condition: service_healthy
        restart: true
    image: ${VAULT_IMAGE}
    container_name: ${VAULT_CONTAINER}
    build:
      context: ./requirements/vault/
      args:
        - VAULT_VERSION=${VAULT_VERSION}
        - VAULT_UID=${VAULT_UID}
        - VAULT_GID=${VAULT_GID}
        - SHARED_GID=${SHARED_GID}
        - VAULT_HOME=${VAULT_HOME}
        - VAULT_DIRS_TO_MAKE=${VAULT_DIRS_TO_MAKE}
    environment:
      - VAULT_ADDR=${VAULT_ADDR}
      - VAULT_CACERT=${VAULT_CACERT}
      - VAULT_SKIP_VERIFY=true
      - SKIP_SETCAP=true
      - VAULT_HEALTHFLAG=${VAULT_HEALTHFLAG}
      - HEALTHFLAG_FILE=${HEALTHFLAG_FILE}
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:${VAULT_HOME}/file
      - vault_certs:${VAULT_HOME}/certs
      - vault_healthiness:${VAULT_HOME}/healthiness
    expose:
      - ${VAULT_API_PORT}
    ports:
      - ${VAULT_API_PORT}:${VAULT_API_PORT}
    networks:
      - transcendance
    healthcheck:
      test: ["CMD-SHELL", "test -f $VAULT_HEALTHFLAG || exit 1"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3
    restart: on-failure

  mail:
    image: ${MAIL_IMAGE}
    container_name: ${MAIL_CONTAINER}
    expose:
      - ${MAIL_PORT}
    networks:
      - ${NETWORK_NAME}
    ports:
      - ${MAIL_UI_PORT}:${MAIL_UI_PORT}
    restart: on-failure

  backend:
    depends_on:
      mail:
        condition: service_started
        restart: true
      vault:
        condition: service_healthy
        restart: true
    image: ${BACKEND_IMAGE}
    container_name: ${BACKEND_CONTAINER}
    pull_policy: never
    build:
      context: ./requirements/backend/
      args:
        - BACKEND_TAG=${BACKEND_TAG}
        - BACKEND_UID=${BACKEND_UID}
        - BACKEND_GID=${BACKEND_GID}
        - SHARED_GID=${SHARED_GID}
        - BACKEND_HOME=${BACKEND_HOME}
        - BACKEND_DIRS_TO_MAKE=${BACKEND_DIRS_TO_MAKE}
        - STATICFILES_DIR=${BACKEND_STATICFILES_DIR}
        - STATICFILES_DIR=${STATICFILES_DIR}
        - HOST_IP=${HOST_IP}
    environment:
      - SECRET_ACCESS_TOKEN=${SECRET_ACCESS_TOKEN}
      - BACKEND_HOME=${BACKEND_HOME}
      - BACKEND_ENTRYPOINT=${BACKEND_ENTRYPOINT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - RESOLVED_PG_HOSTNAME=${RESOLVED_PG_HOSTNAME}
      - GUNICORN_CMD_ARGS=${GUNICORN_CMD_ACTIVE_OPTIONS}
      - STATICFILES_DIR=${BACKEND_STATICFILES_DIR}
      - BACKEND_ROOT_CA=${BACKEND_ROOT_CA}
      - VAULT_CACERT=${BACKEND_VAULT_CACERT}
      - HEALTHFLAG_FILE=${HEALTHFLAG_FILE}
      - HOST_IP=${HOST_IP}
      - MAIL_CONTAINER=${MAIL_CONTAINER}
      - MAIL_PORT=${MAIL_PORT}
    volumes:
      - ./requirements/backend/srcs/:${BACKEND_HOME}/apps/
      # - staticfiles:${BACKEND_STATICFILES_DIR}
      - vault_certs:${BACKEND_HOME}/volumes/vault/certs
      - backend_certs:${BACKEND_SSL_DIR}
    healthcheck: #*file_healthcheck
      test:
        [
          "CMD-SHELL",
          "curl -s http://localhost:${BACKEND_PORT} | grep -q ''",
          # "curl -s --cacert $BACKEND_ROOT_CA https://localhost:${BACKEND_PORT} | grep -q ''", # In production
        ]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 1
    expose:
      - ${BACKEND_PORT}
    networks:
      - ${NETWORK_NAME}
    ports:
      - 8000:${BACKEND_PORT}
    restart: on-failure

  frontend_waf:
    depends_on:
      backend:
        condition: service_healthy
        restart: true
    image: ${FRONTENDWAF_IMAGE}
    container_name: ${FRONTENDWAF_CONTAINER}
    pull_policy: never
    build:
      context: ./requirements/waf/
      args:
        - MODSECURITY_TAG=${MODSECURITY_TAG}
        - NGINX_UID=${NGINX_UID}
        - NGINX_GID=${NGINX_GID}
        - MODSEC_HOME=${MODSEC_HOME}
        - SHARED_GID=${SHARED_GID}
        - MODSEC_DIRS_TO_MAKE=${MODSEC_DIRS_TO_MAKE}
        - MODSEC_LOGS_ROOT=${MODSEC_LOGS_ROOT}
        - MODSEC_AUDIT_LOG_DIR=${MODSEC_AUDIT_LOG_DIR}
        - MODSEC_DEBUG_LOG_DIR=${MODSEC_DEBUG_LOG_DIR}
        - NGINX_STATICFILES_DIR=${NGINX_STATICFILES_DIR}
        - NGINX_LOG_FILES=${NGINX_LOG_FILES}
        - REVERSEPROXY_CONF_FILE=./frontend_waf/conf/frontend.conf.template
    environment:
      - MODSEC_AUDIT_LOG_PARTS=${MODSEC_AUDIT_LOG_PARTS}
      - MODSEC_HOME=${MODSEC_HOME}
      - NGINX_ROOT_CA=${NGINX_ROOT_CA}
      - FRONTENDWAF_HTTP_PORT=${FRONTENDWAF_HTTP_PORT}
      - FRONTENDWAF_HTTPS_PORT=${FRONTENDWAF_HTTPS_PORT}
      - MODSEC_AUDIT_LOG_PARTS=${MODSEC_AUDIT_LOG_PARTS}
      - MODSEC_AUDIT_LOG_PARTS=${MODSEC_AUDIT_LOG_PARTS}
      # - MODSEC_AUDIT_LOG=${MODSEC_AUDIT_LOG}
      # - MODSEC_DEBUG_LOG=${MODSEC_DEBUG_LOG}
      # - MODSEC_DEBUG_LOGLEVEL=${MODSEC_DEBUG_LOGLEVEL}
    volumes:
      - ./requirements/waf/frontend_waf/srcs/templates/base.html:${MODSEC_HOME}/html/base.html
      - ./requirements/waf/frontend_waf/srcs/static/:${MODSEC_HOME}/volumes/www/static/
      # - ./requirements/waf/conf/modsecurity-override.conf.template:/etc/nginx/templates/modsecurity.d/modsecurity-override.conf.template
      # - staticfiles:${NGINX_STATICFILES_DIR}
      - modsec_data:${MODSEC_DATA_DIR}
      # - modsec_audit_logs:${MODSEC_AUDIT_LOG_DIR}
      # - modsec_debug_logs:${MODSEC_DEBUG_LOG_DIR}
      # - nginx_logs:${NGINX_LOG_FILES_DIR}
      - nginx_certs:${MODSEC_HOME}/volumes/nginx/certs
      - vault_certs:${MODSEC_HOME}/volumes/vault/certs
    ports:
      - ${FRONTENDWAF_HTTP_PORT}:${FRONTENDWAF_HTTP_PORT}
      - ${FRONTENDWAF_HTTPS_PORT}:${FRONTENDWAF_HTTPS_PORT}
    networks:
      - ${NETWORK_NAME}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert $NGINX_ROOT_CA https://localhost:${FRONTENDWAF_HTTPS_PORT} > /dev/null",
        ]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 1
    # restart: on-failure

  proxy_waf:
    depends_on:
      backend:
        condition: service_healthy
        restart: true
      frontend_waf:
        condition: service_healthy
        restart: true
    image: ${PROXYWAF_IMAGE}
    container_name: ${PROXYWAF_CONTAINER}
    pull_policy: never
    build:
      context: ./requirements/waf/
      args:
        - MODSECURITY_TAG=${MODSECURITY_TAG}
        - NGINX_UID=${NGINX_UID}
        - NGINX_GID=${NGINX_GID}
        - MODSEC_HOME=${MODSEC_HOME}
        - SHARED_GID=${SHARED_GID}
        - MODSEC_DIRS_TO_MAKE=${MODSEC_DIRS_TO_MAKE}
        - MODSEC_LOGS_ROOT=${MODSEC_LOGS_ROOT}
        - MODSEC_AUDIT_LOG_DIR=${MODSEC_AUDIT_LOG_DIR}
        - MODSEC_DEBUG_LOG_DIR=${MODSEC_DEBUG_LOG_DIR}
        - NGINX_STATICFILES_DIR=${NGINX_STATICFILES_DIR}
        - NGINX_LOG_FILES=${NGINX_LOG_FILES}
        - REVERSEPROXY_CONF_FILE=./proxy_waf/conf/proxy.conf.template
    environment:
      - ALLOWED_METHODS=${MODSEC_ALLOWED_METHODS}
      - MODSEC_AUDIT_LOG_PARTS=${MODSEC_AUDIT_LOG_PARTS}
      - MODSEC_HOME=${MODSEC_HOME}
      - NGINX_ROOT_CA=${NGINX_ROOT_CA}
      - PROXYWAF_HTTP_PORT=${PROXYWAF_HTTP_PORT}
      - PROXYWAF_HTTPS_PORT=${PROXYWAF_HTTPS_PORT}
      - MODSEC_AUDIT_LOG_PARTS=${MODSEC_AUDIT_LOG_PARTS}
      - MODSEC_AUDIT_LOG_PARTS=${MODSEC_AUDIT_LOG_PARTS}
      # - MODSEC_AUDIT_LOG=${MODSEC_AUDIT_LOG}
      # - MODSEC_DEBUG_LOG=${MODSEC_DEBUG_LOG}
      # - MODSEC_DEBUG_LOGLEVEL=${MODSEC_DEBUG_LOGLEVEL}
    volumes:
      # - ./requirements/waf/conf/modsecurity-override.conf.template:/etc/nginx/templates/modsecurity.d/modsecurity-override.conf.template
      - staticfiles:${NGINX_STATICFILES_DIR}
      - modsec_data:${MODSEC_DATA_DIR}
      # - modsec_audit_logs:${MODSEC_AUDIT_LOG_DIR}
      # - modsec_debug_logs:${MODSEC_DEBUG_LOG_DIR}
      # - nginx_logs:${NGINX_LOG_FILES_DIR}
      - nginx_certs:${MODSEC_HOME}/volumes/nginx/certs
      - vault_certs:${MODSEC_HOME}/volumes/vault/certs
    ports:
      - ${PROXYWAF_HTTP_PORT}:${PROXYWAF_HTTP_PORT}
      - ${PROXYWAF_HTTPS_PORT}:${PROXYWAF_HTTPS_PORT}
    networks:
      - ${NETWORK_NAME}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert $NGINX_ROOT_CA https://localhost:${PROXYWAF_HTTPS_PORT} > /dev/null",
        ]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 1
    # restart: on-failure
  
  vault_waf:
    depends_on:
      vault:
        condition: service_healthy
        restart: true
    image: ${VAULTWAF_IMAGE}
    container_name: ${VAULTWAF_CONTAINER}
    pull_policy: never
    build:
      context: ./requirements/waf/
      args:
        - MODSECURITY_TAG=${MODSECURITY_TAG}
        - NGINX_UID=${NGINX_UID}
        - NGINX_GID=${NGINX_GID}
        - MODSEC_HOME=${MODSEC_HOME}
        - SHARED_GID=${SHARED_GID}
        - MODSEC_DIRS_TO_MAKE=${MODSEC_DIRS_TO_MAKE}
        - MODSEC_LOGS_ROOT=${MODSEC_LOGS_ROOT}
        - MODSEC_AUDIT_LOG_DIR=${MODSEC_AUDIT_LOG_DIR}
        - MODSEC_DEBUG_LOG_DIR=${MODSEC_DEBUG_LOG_DIR}
        - NGINX_STATICFILES_DIR=${NGINX_STATICFILES_DIR}
        - NGINX_LOG_FILES=${NGINX_LOG_FILES}
        - REVERSEPROXY_CONF_FILE=./vault_waf/conf/vault.conf.template
    environment:
      - MODSEC_AUDIT_LOG_PARTS=${MODSEC_AUDIT_LOG_PARTS}
      - MODSEC_HOME=${MODSEC_HOME}
      - NGINX_ROOT_CA=${NGINX_ROOT_CA}
      - VAULTWAF_HTTP_PORT=${VAULTWAF_HTTP_PORT}
      - VAULTWAF_HTTPS_PORT=${VAULTWAF_HTTPS_PORT}
      - MODSEC_AUDIT_LOG_PARTS=${MODSEC_AUDIT_LOG_PARTS}
      - MODSEC_AUDIT_LOG_PARTS=${MODSEC_AUDIT_LOG_PARTS}
      # - MODSEC_AUDIT_LOG=${MODSEC_AUDIT_LOG}
      # - MODSEC_DEBUG_LOG=${MODSEC_DEBUG_LOG}
      # - MODSEC_DEBUG_LOGLEVEL=${MODSEC_DEBUG_LOGLEVEL}
    volumes:
      # - ./requirements/waf/conf/modsecurity-override.conf.template:/etc/nginx/templates/modsecurity.d/modsecurity-override.conf.template
      - modsec_data:${MODSEC_DATA_DIR}
      # - modsec_audit_logs:${MODSEC_AUDIT_LOG_DIR}
      # - modsec_debug_logs:${MODSEC_DEBUG_LOG_DIR}
      # - nginx_logs:${NGINX_LOG_FILES_DIR}
      - nginx_certs:${MODSEC_HOME}/volumes/nginx/certs
      - vault_certs:${MODSEC_HOME}/volumes/vault/certs
    ports:
      - ${VAULTWAF_HTTP_PORT}:${VAULTWAF_HTTP_PORT}
      - ${VAULTWAF_HTTPS_PORT}:${VAULTWAF_HTTPS_PORT}
    networks:
      - ${NETWORK_NAME}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert $NGINX_ROOT_CA https://localhost:${VAULTWAF_HTTPS_PORT}/healthcheck | grep -q 'healthy'",
        ]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3
    restart: on-failure

  ready:
    depends_on:
      backend:
        condition: service_healthy
        restart: true
      proxy_waf:
        condition: service_healthy
        restart: true
      frontend_waf:
        condition: service_healthy
        restart: true
      vault_waf:
        condition: service_healthy
        restart: true
    image: alpine:${ALPINE_VERSION}
    container_name: ready_c
    command: echo "Microservices Infrastructure is ready and healthy!"
    restart: on-failure

networks:
  transcendance:
    driver: bridge

volumes:
  vault_data:
    driver: local
  vault_healthiness:
    driver: local
  modsec_data:
    driver: local
  modsec_audit_logs:
    driver: local
  modsec_debug_logs:
    driver: local
  nginx_logs:
    driver: local
  staticfiles:
    driver: local
  certs:
    driver: local
  vault_certs:
    driver: local
  nginx_certs:
    driver: local
  backend_certs:
    driver: local
