name: ${PROJECT_NAME}

services:
  db_postgres:
    image: ${POSTGRES_IMAGE}
    container_name: ${POSTGRES_CONTAINER}
    pull_policy: never
    build: ./requirements/db_postgres/
    env_file:
      - ./.env
    # volumes:
    #   - webapps:/usr/src/apps
    healthcheck: &my_healthcheck
      test: ["CMD-SHELL", "test -f $HEALTHFLAG_FILE || exit 1"]
      interval: 2s
      timeout: 15s
      retries: 3
      start_period: 20s
    expose:
      - ${POSTGRES_PORT}
    # ports:
    #   - 5432:5432
    networks:
      - ${NETWORK_NAME}
    # restart: on-failure

  web:
    depends_on:
      db_postgres:
        condition: service_healthy
        restart: true
    image: ${WEB_IMAGE}
    container_name: ${WEB_CONTAINER}
    pull_policy: never
    build: ./requirements/web/
    env_file:
      - ./.env
    volumes:
      - webapps:/usr/src/apps
    expose:
      - ${WEB_PORT}
    networks:
      - ${NETWORK_NAME}
    ports:
      - 8888:${WEB_PORT}
    restart: on-failure
  
  nodejs:
    depends_on:
      db_postgres:
        condition: service_healthy
        restart: true
    image: ${NODEJS_IMAGE}
    container_name: ${NODEJS_CONTAINER}
    # pull_policy: never
    build: ./requirements/nodejs/
    env_file:
      - ./.env
    expose:
      - ${NODEJS_PORT}
    networks:
      - ${NETWORK_NAME}
    ports:
      - 3000:${NODEJS_PORT}
    restart: on-failure

networks:
  transcendance:
    driver: bridge

volumes:
  webapps:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./requirements/web/webapps/